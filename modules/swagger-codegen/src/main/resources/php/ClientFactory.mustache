<?php
/**
 * ClientFactory
 *
 * PHP version 5
 *
 * @category Class
 * @package  {{invokerPackage}}
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

{{>partial_header}}
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace {{invokerPackage}};

/**
 * ClientFactory Class Doc Comment
 *
 * @category Class
 * @package  {{invokerPackage}}
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ClientFactory
{
    /**
     * Configuration
     *
     * @var Configuration
     */
    protected $config;

    /**
     * Constructor of the class
     *
     * @param $config config for this ClientFactory
     */
    public function __construct($config = null)
    {
        $this->config = $config;
    }

    public function createClientInterface() : ClientInterface
    {
        return new class implements ClientInterface
        {
            public function send(RequestInterface $request, array $options = [])
            {
                return $this->getFile($request);
            }

            public function sendAsync(RequestInterface $request, array $options = [])
            {
                return $this->getFile($request);
            }

            public function request($method, $uri, array $options = [])
            {
                return $this->getFileByMethod($method);
            }

            public function requestAsync($method, $uri, array $options = [])
            {
                return $this->getFileByMethod($method);
            }

            public function getConfig($option = null)
            {
                return [];
            }

            private function getFileByMethod($method)
            {
                return $this->getFile(new Request($method, ''));
            }

            private function getFile(RequestInterface $request)
            {
                if(is_a($request, ExtendedRequest::class)){
                    $resourcePath = $request->getResourcePath();
                    $responseCodes = $request->getResponseCodesExpected();
                    $baseName = $request->getBaseName();

                    $successCode = '200';

                    $pattern = '/^2\d+/';
                    foreach($responseCodes as $code){
                        preg_match($pattern, $code, $matches);
                        if(count($matches) > 0){
                            $successCode = $code;
                            break;
                        }
                    }

                    $dir = $this->config->getMockResponsesRoot() . '/' . $baseName . '/';
                    $filename = substr($resourcePath, 1);
                    $filename = str_replace($filename, '/', '-');

                    $filename .= '.' . strtolower($request->getMethod()) . 'response' .  $successCode . '.json';
                    echo $filename;
                    return new Response($successCode, [], file_get_contents($dir.$filename));
                }

            }
        };
    }
}