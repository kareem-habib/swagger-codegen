<?php
/**
 * {{classname}}Test
 * PHP version 5
 *
 * @category Class
 * @package  {{invokerPackage}}
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

{{>partial_header}}
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the endpoint.
 */

namespace {{invokerPackage}};

use \{{invokerPackage}}\Configuration;
use \{{invokerPackage}}\ApiException;
use \{{invokerPackage}}\ObjectSerializer;
use \{{invokerPackage}}\ModelValidator;
use \{{invokerPackage}}\ClientFactory;
use \{{apiPackage}}\{{classname}};

/**
 * {{classname}}Test Class Doc Comment
 *
 * @category Class
 * @package  {{invokerPackage}}
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
{{#operations}}class {{classname}}Test extends \PHPUnit_Framework_TestCase
{
    /**
     * Model Validator
     *
     * @var  ModelValidator
     */
    protected $modelValidator;

    /**
     * Client Factory
     *
     * @var  ClientFactory
     */
    protected $clientFactory;


    /**
     * Configuration of this test
     *
     * @var  Configuration
     */
    protected $config;

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass()
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {
        // Setup configuration of this test class
        $this->config = new Configuration();
        $this->config->setMockResponsesRoot('mock-responses');

        $this->modelValidator = new modelValidator();
        $this->clientFactory = new ClientFactory($this->config);
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {
    }
    {{#operation}}

    /**
     * Test case for {{{operationId}}}
     *
     * {{{summary}}}.
     *
     */
    public function test{{vendorExtensions.x-testOperationId}}()
    {
        // Construct an API Object (shouldn't this be shared?)
        $api = new {{classname}}($this->clientFactory->createClientInterface());

        // Add vars here
        parse_str('', $vars);

        // Invoke Api
        $object = $api->{{vendorExtensions.x-testOperationId}}(array_values($vars)); //Dynamic

        //recursively call valid() on $object;
        $isValid = $this->modelValidator->validateRecursively($object);
        $this->assertTrue($isValid); 
    }
    {{/operation}}
}
{{/operations}}
